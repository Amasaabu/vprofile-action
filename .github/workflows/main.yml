name: vprofile actions
on: workflow_dispatch
env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: vprofileapp
  EKS_CLUSTER: vprofile1-eks
jobs:
  Testing:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Maven Test
        run: mvn test

      - name: Checkstyle
        run: mvn checkstyle:checkstyle

      - name: set Java 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

          
      - name: Setup SonarQube
        uses: warchant/setup-sonar-scanner@v7
        
      - name: Setup SonarQube
        run: sonar-scanner
          -Dsonar.host.url=${{secrets.SONAR_URL}}
          -Dsonar.login=${{secrets.SONAR_TOKEN}}
          -Dsonar.organization=${{secrets.SONAR_ORGANIZATION}}
          -Dsonar.projectKey=${{secrets.SONAR_PROJECT_KEY}}
          -Dsonar.sources=src/
          -Dsonar.junit.reportsPath=target/surefire-reports/
          -Dsonar.jacococ.reportsPath=target/jacoco.exec
          -Dsonar.java.checkstyle.reportsPaths=target/checkstyle-result.xml
          -Dsonar.java.binaries=target/test-classes/com/visualpathit/account

      - name: SonarQube Quality Gate Check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{secrets.SONAR_TOKEN}}
          SONAR_HOST_URL: ${{secrets.SONAR_URL}}

  BUILD_AND_PUBLISH:
    needs: Testing
    runs-on: ubuntu-latest
    steps:
      - name: Code checkout
        uses: actions/checkout@v4

      - name: upload image to ECR
        uses: appleboy/docker-ecr-action@master
        with:
          access_key: ${{ secrets.aws_access_key_id }}
          secret_key: ${{ secrets.aws_secret_access_key }}
          registry: ${{ secrets.registry }}
          repo: ${{env.ECR_REPOSITORY}}
          region: ${{env.AWS_REGION}}
          tag: latest,${{github.run_number}}
          daemon_off: false
          dockerfile: ./Dockerfile
          context: ./

  Deploy To EKS:
    needs: BUILD_AND_PUBLISH
    runs-on: ubuntu-latest
    steps:
      - name: Code checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}

      - name: Get Kube config file
        run: aws eks update-kubeconfig --region ${{env.AWS_REGION}} --name ${{env.EKS_CLUSTER}}

      - name: Output config file
        run: cat ~/.kube/config

      - name: Login to ECR
        run: kubectl create secret docker-registry regcred --docker-server=${{secrets.REGISTRY}} --docker-username=AWS --docker-password=$(aws ecr get-login-password)

      

      - name: Deploy Helm
      uses: bitovi/github-actions-deploy-eks-helm@v1.2.10
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{env.AWS_REGION}}
        cluster-name: ${{env.EKS_CLUSTER}}
        # config-files: .github/values/dev.yaml
        chart-path: helm/vprofilecharts
        namespace: default
        values: appimage=${{secrets.REGISTRY}}/${{env.REPOSITORY}},apptag=${{github.run_number}}
        name: vprofile-stack